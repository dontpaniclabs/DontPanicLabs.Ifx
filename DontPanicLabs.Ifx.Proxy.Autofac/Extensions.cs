using Autofac;
using DontPanicLabs.Ifx.Services.Contracts;
using Autofac.Extras.DynamicProxy;

namespace DontPanicLabs.Ifx.Proxy.Autofac
{
    internal static class ContainerBuilderExtensions
    {
        public static IoC.Autofac.ContainerBuilder AutoDiscoverServices(this IoC.Autofac.ContainerBuilder builder, bool isInterceptionEnabled)
        {
            builder.RegisterServices(builder =>
            {
                var dynamic = builder
                    .RegisterAssemblyTypes(AppDomain.CurrentDomain.GetAssemblies())
                    .Where(t =>
                        typeof(IService).IsAssignableFrom(t)
                     ).AsImplementedInterfaces();

                if (isInterceptionEnabled)
                { 
                    dynamic.EnableInterfaceInterceptors();
                }
            });

            return builder;
        }

        public static IoC.Autofac.ContainerBuilder RegisterServices(this IoC.Autofac.ContainerBuilder builder, Dictionary<Type, Type[]> serviceTypes, bool isInterceptionEnabled)
        {
            builder.RegisterServices(options =>
            {
                foreach (var contract in serviceTypes)
                {
                    foreach (var implementation in contract.Value)
                    {
                        var dynamic = options.RegisterType(implementation).As(contract.Key);

                        if (isInterceptionEnabled)
                        {
                            dynamic.EnableInterfaceInterceptors();
                        }
                    }
                }
            });

            return builder;
        }
    }

    public static class CastleProxyExtensions
    {
        public static object? GetProxyTarget(this IService service)
        {
            var proxyType = service.GetType();

            var instanceField = proxyType.GetField("__target", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            if (instanceField is null) throw new NullReferenceException("Could not find field __target.  This extension method should only be run against objects generated by Castle.DynamicProxy.");

            var fieldValue = instanceField.GetValue(service);

            return fieldValue;
        }
    }
}
